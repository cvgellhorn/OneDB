{"name":"OneDB","tagline":"A lightweight/single file PHP database framework","body":"OneDB [![Build Status](https://travis-ci.org/cvgellhorn/OneDB.svg?branch=master)](https://travis-ci.org/cvgellhorn/OneDB)\r\n===========\r\n\r\n> A lightweight/single file PHP database framework\r\n\r\n##Overview\r\nOneDB is using the PDO extension and is based on three classes:\r\n\r\n* <b>OneDB</b> - Main database framework\r\n* <b>OneExpr</b> - Database expression\r\n* <b>OneException</b> - Exception\r\n\r\nAll tests are based on the [PHPUnit](http://phpunit.de/) testing framework. You can easily set up your own phpunit.xml, for local unit testing. It's also very lightweight, only around 13 kb and all packed in a single PHP file.\r\n\r\n##Getting started\r\n```php\r\n// Include OneDB\r\nrequire_once 'OneDB.php';\r\n\r\n// Create OneDB instance and have fun\r\n$database = OneDB::load(array(\r\n    'database'  => 'application',\r\n    'user'      => 'root',\r\n    'password'  => 'admin123#'\r\n));\r\n\r\n// After initializing, you can always get the current instance with\r\n$database = OneDB::load();\r\n\r\n\r\n// Or create a new connection by name (for multiple connections)\r\n$dbWrite = OneDB::getConnection('write', array(\r\n    'database'  => 'application',\r\n    'user'      => 'root',\r\n    'password'  => 'admin123#'\r\n));\r\n\r\n// Reload connection again later\r\n$dbWrite = OneDB::getConnection('write');\r\n```\r\n\r\n##Configuration\r\nYou can also set the database host, port and charset.\r\n```php\r\n$database = OneDB::load(array(\r\n\t'host'      => 'sql.mydomain.com',\r\n    'port'      => '3307',\r\n    'charset'   => 'utf16',\r\n    'database'  => 'application',\r\n    'user'      => 'root',\r\n    'password'  => 'admin123#'\r\n));\r\n```\r\n\r\nDefault settings\r\n```php\r\n'host'    => 'localhost'\r\n'port'    => '[default_mysql_port]'\r\n'charset' => 'utf8'\r\n```\r\n\r\n##Basic Usage\r\n###Insert\r\nInsert new records in table, returns LAST_INSERT_ID.\r\n\r\n```php\r\ninsert($table : string, $data : array)\r\n```\r\n\r\nExample:\r\n```php\r\n$lastInsertId = $database->insert('user', array(\r\n\t'name'  => 'John Doe',\r\n    'email' => 'john@doe.com',\r\n    'tel'   => 12345678\r\n));\r\n```\r\n\r\n###Update\r\nEdit data in table. You can use any given operator in the WHERE clause to filter the records. The ? represents the placeholder for the given param.\r\n\r\n```php\r\nupdate($table : string, $data : array, [$where : array])\r\n```\r\n\r\nExample:\r\n```php\r\n$database->update(\r\n\t'user',\r\n    array(\r\n\t\t'name'   => 'John Smith',\r\n    \t'email'  => 'john@smith.com',\r\n    \t'tel'    => 87654321\r\n    ),\r\n    array(\r\n    \t'id = ?' => 23\r\n    )\r\n);\r\n```\r\n\r\n###Delete\r\nRemove data from table. Just as update, the ? represents the placeholder for the given param.\r\n\r\n```php\r\ndelete($table : string, [$where : array])\r\n```\r\n\r\nExample:\r\n```php\r\n$database->delete('user', array(\r\n\t'id = ?' => 23\r\n));\r\n```\r\n\r\n###Fetch All\r\nRetrieve all the rows of the result set in one step as an array.\r\n```php\r\nfetchAll($sql : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->fetchAll('SELECT * FROM `user`');\r\n```\r\n\r\n###Fetch Assoc\r\nRetrieve all the rows of the result set in one step as an array, using the first column or the given key as the array index.\r\n```php\r\nfetchAssoc($sql : string, [$key : string])\r\n```\r\n\r\nExample:\r\n```php\r\n$database->fetchAssoc('SELECT * FROM `user`', 'username');\r\n```\r\n\r\n###Fetch Row\r\nRetrieve a single row of the result set as an array.\r\n```php\r\nfetchRow($sql : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->fetchRow('SELECT * FROM `user` WHERE `id` = 1');\r\n```\r\n\r\n###Fetch One\r\nRetrieve a single result value.\r\n```php\r\nfetchOne($sql : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->fetchOne('SELECT `username` FROM `user` WHERE `id` = 1');\r\n```\r\n\r\n###Query\r\nSend a SQL query. If there is a result, you will automatically get the matched result type: fetch all, fetch row or fetch one.\r\n```php\r\nquery($sql : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->query('DELETE FROM `user` WHERE `id` = 1');\r\n\r\n// With result\r\n$result = $database->query('SELECT * FROM `user`');\r\n```\r\n\r\n###Last Insert ID\r\nReturns the ID of the last inserted row.\r\n```php\r\nlastInsertId()\r\n```\r\n\r\nExample:\r\n```php\r\n$database->lastInsertId();\r\n```\r\n\r\n\r\n##Advanced Usage\r\n###Expression\r\nYou can also use database expressions in your statement, by using the OneExpr object.\r\n```php\r\n$lastInsertId = $database->insert('user', array(\r\n    'name'    => 'John Doe',\r\n    'email'   => 'john@doe.com',\r\n    'tel'     => 12345678,\r\n    'created' => new OneExpr('NOW()')\r\n));\r\n```\r\n\r\n###Truncate\r\nTruncate database table.\r\n```php\r\ntruncate($table : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->truncate('user');\r\n```\r\n\r\n###Drop\r\nDrop database table.\r\n```php\r\ndrop($table : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->drop('user');\r\n```\r\n\r\n###Describe\r\nDescribe database table, returns the table attributes as array keys.\r\n```php\r\ndescribe($table : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->describe('user');\r\n```\r\n\r\n###Transaction\r\nRun a database transaction.\r\n```php\r\ntry {\r\n\t// Start transaction\r\n\t$db->beginTransaction();\r\n\r\n\t// Do stuff\r\n\t$db->insert('user', array(\r\n\t\t'name' => 'Skywalker'\r\n\t));\r\n\t$db->delete('user', array(\r\n\t\t'id = ?' => 3\r\n\t));\r\n\r\n    // Check transaction status, returns bool\r\n    $status = $db->inTransaction();\r\n\r\n\t// Commit transaction if no error occurred\r\n\t$db->commit();\r\n} catch (OneException $e) {\r\n\t// Rollback on error\r\n\t$db->rollBack();\r\n}\r\n```\r\n\r\n###Quote\r\nAdd quotes to the given value.\r\n```php\r\nquote($val : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->quote($value);\r\n```\r\n\r\n###Backtick\r\nAdd backticks to the given field name.\r\n```php\r\nbtick($val : string)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->btick('user');\r\n```\r\n\r\n###PDO\r\nReturns the current PDO object.\r\n```php\r\ngetPDO()\r\n```\r\n\r\nExample:\r\n```php\r\n$database->getPDO();\r\n```\r\n\r\n\r\n##Special Usage\r\n###Multi Insert\r\nInsert multiple records into database table.\r\n```php\r\nmultiInsert($table : string, $keys : array, $data : array)\r\n```\r\n\r\nExample:\r\n```php\r\n$database->multiInsert('user',\r\n    array('name', 'email', 'tel'),\r\n    array(\r\n    \tarray(\r\n        \t'John Doe',\r\n            'john@doe.com',\r\n            12345678\r\n        ),\r\n        array(\r\n        \t'John Smith',\r\n            'john@smith.com',\r\n            11223344\r\n        ),\r\n        array(\r\n        \t'Jack Smith',\r\n            'jack@smith.com',\r\n            87654321\r\n        )\r\n\t)\r\n);\r\n```\r\n\r\n###Save\r\nUpdate data if exist, otherwise insert new data. Using the ON DUPLICATE KEY UPDATE expression.\r\n```php\r\nsave($table : string, $data : array)\r\n```\r\nExample:\r\n```php\r\n$database->save('user', array(\r\n\t'id'\t=> 1,\r\n    'name'  => 'John Doe',\r\n    'email' => 'john@doe.com',\r\n    'tel'   => 12345678\r\n));\r\n```\r\n\r\n\r\n##Debug\r\nYou can activate the debug mode by using the following statement. It will show you all executed SQL queries and the parameter bindings.\r\n```php\r\n$database->debug();\r\n```\r\n\r\nIt's also possible to change the debug style with the debugStyle attribute.\r\n```php\r\n$database->debugStyle = array(\r\n\t'border: 2px solid #d35400',\r\n\t'border-radius: 3px',\r\n\t'background-color: #e67e22',\r\n\t'margin: 5px 0 5px 0',\r\n\t'color: #ffffff',\r\n\t'padding: 5px'\r\n);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}